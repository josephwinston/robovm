package: org.robovm.apple.coreimage
include: [coregraphics.yaml, foundation.yaml, opengles.yaml]
library: CoreImage
framework: CoreImage
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/CoreImage.framework/Headers/CoreImage.h
typedefs: {}
enums:

classes:
    CoreImage:
        annotations: ['@Marshaler(NSString.AsStringMarshaler.class)']

    CIColor:
        methods:
            '+colorWithCGColor:':
                exclude: true
            '+color.*':
                visibility: protected
                return_type: "@Pointer long"
            '-(alpha|blue|colorSpace|green|numberOfComponents|red|stringRepresentation)':
                property: true
            '-components':
                visibility: protected
    CIContext:
        methods:
            '+context.*':
                visibility: protected
                return_type: "@Pointer long"
            '-(inputImageMaximumSize|outputImageMaximumSize)':
                property: true
            '-drawImage.*':
                name: drawImage
            # Skip methods that renders to CVBuffers for now until we have CoreVideo support
            '-render:toCVPixelBuffer:.*':
                exclude: true
            '-render.*':
                name: render
            '-createCGImage.*':
                name: createCGImage
            '-createCGLayer.*':
                name: createCGLayer
    CIDetector:
        methods:
            '+detectorOfType:context:options:':
                visibility: protected
                return_type: "@Pointer long"
            '-featuresInImage.*':
                name: findFeatures
                return_type: "NSArray<CIFeature>"
    CIFaceFeature: {}
    CIFeature: {}
    CIFilter:
        skip_def_constructor: true
        methods:
            '+filterWithName:':
                name: getFilter
            '+serializedXMPFromFilters:inputImageExtent:':
                name: serializeToXMP
                parameters:
                    filters:
                        type: "NSArray<CIFilter>"
            '+filterArrayFromSerializedXMP:inputImageExtent:error:':
                name: deserializeFromXMP
                return_type: "NSArray<CIFilter>"
            '+filterNames.*':
                name: getFilterNames
                return_type: "NSArray<NSString>"
                parameters:
                    categories:
                        type: "NSArray<NSString>"
            '-(name|inputKeys|outputKeys|attributes)':
                property: true
    CIImage:
        methods:
            '+imageWith.*':
                exclude: true
            '+emptyImage':
                name: getEmptyImage
            '-(extent|properties)':
                property: true
            '-autoAdjustmentFilters.*':
                name: getAutoAdjustmentFilters
                return_type: "NSArray<CIFilter>"
            '-regionOfInterestForImage:inRect:':
                name: getRegionOfInterest
            '-image(By[^:]*).*':
                name: "createImage#{g[0]}"
            # Skip constructors that take a CVBuffer for now until we have CoreVideo support
            '-initWithCVPixelBuffer:.*':
                exclude: true

    CIVector:
        methods:
            '+vectorWith.*':
                exclude: true
            '-(X|Y|Z|W|count|stringRepresentation|CGAffineTransformValue|CGPointValue|CGRectValue)':
                property: true
            '-valueAtIndex:':
                name: getValueAtIndex
            '-initWithValues:count:':
                constructor: false

protocols:

functions:

    # Make sure we don't miss any functions if new ones are introduced in a later version
    (CI.*):
        class: CoreImage
        name: "Function__#{g[0]}"

values:

    kCI(.*Key):
        type: NSString
        name: "#{g[0]}"
        readonly: true

    kCI(Context.*):
        name: "#{g[0]}"
        type: NSString

    CI(Detector(Accuracy|Tracking|MinFeatureSize)):
        name: "#{g[0]}"
        type: NSString
    CI(DetectorType.*):
        name: "#{g[0]}"
    CI(DetectorAccuracy.+):
        name: "#{g[0]}"
        type: NSString
    CI(Detector(ImageOrientation|EyeBlink|Smile)):
        name: "#{g[0]}"
        type: NSString

    CI(FeatureTypeFace):
        name: "#{g[0]}"

    kCI(Attribute.*):
        name: "#{g[0]}"
        type: NSString
        readonly: true
    kCI(Category.*):
        name: "#{g[0]}"
        type: NSString
        readonly: true

    kCI(Format.*):
        name: "#{g[0]}"
        readonly: true
    kCI(ImageAutoAdjust.*):
        name: "#{g[0]}"
        type: NSString
        readonly: true
    kCI(Image.*):
        name: "#{g[0]}"
        type: NSString
        readonly: true

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?CI.*):
        class: CoreImage
        name: "Value__#{g[0]}"

constants:

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?CI.*):
        class: CoreImage
        name: "Constant__#{g[0]}"
