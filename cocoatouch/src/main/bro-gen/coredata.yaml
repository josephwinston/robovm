package: org.robovm.apple.coredata
include: [foundation.yaml]
library: CoreData
framework: CoreData
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/CoreData.framework/Headers/CoreData.h
typedefs: {}
enums:
    NSAttributeType: {first: NSUndefinedAttributeType, suffix: AttributeType, type: MachineUInt}
    NSCoreDataError: {first: NSManagedObjectValidationError, suffix: Error}
    NSDeleteRule: {first: NSNoActionDeleteRule, suffix: DeleteRule, type: MachineUInt}
    NSEntityMappingType: {first: NSUndefinedEntityMappingType, suffix: EntityMappingType, type: MachineUInt}
    NSFetchedResultsChangeType: {first: NSFetchedResultsChangeInsert, type: MachineUInt}
    NSFetchRequestResultType: {first: NSManagedObjectResultType, suffix: ResultType, type: MachineUInt}
    NSManagedObjectContextConcurrencyType: {first: NSConfinementConcurrencyType, suffix: ConcurrencyType, type: MachineUInt}
    NSMergePolicyType: {first: NSErrorMergePolicyType, suffix: MergePolicyType, type: MachineUInt}
    NSPersistentStoreRequestType: {first: NSFetchRequestType, suffix: RequestType, type: MachineUInt}
    NSPersistentStoreUbiquitousTransitionType: {}
    NSSnapshotEventType: {first: NSSnapshotEventUndoInsertion, type: MachineUInt, bits: true}
    # Don't know what to do with this one
    Ignored: {first: NSFetchRequestExpressionType, exclude: true}
classes:
    CoreData:
        annotations: ['@Marshaler(NSString.AsStringMarshaler.class)']

    NSAtomicStore: {}
    NSAtomicStoreCacheNode: {}
    NSAttributeDescription: {}
    NSEntityDescription: {}
    NSEntityMapping: {}
    NSEntityMigrationPolicy: {}
    NSExpressionDescription: {}
    NSFetchedPropertyDescription: {}
    NSFetchedResultsController: {}
    NSFetchRequest:
        methods:
            '-init': {exclude: true}
    NSFetchRequestExpression: {}
    NSIncrementalStore: {}
    NSIncrementalStoreNode: {}
    NSManagedObject: {}
    NSManagedObjectContext: {}
    NSManagedObjectID: {}
    NSManagedObjectModel:
        methods:
            '-init': {exclude: true}
    NSMappingModel: {}
    NSMergeConflict: {}
    NSMergePolicy: {}
    NSMigrationManager: {}
    NSPersistentStore: {}
    NSPersistentStoreCoordinator: {}
    NSPersistentStoreRequest: {}
    NSPropertyDescription: {}
    NSPropertyMapping: {}
    NSRelationshipDescription: {}
    NSSaveChangesRequest: {}

protocols:

    NSFetchedResultsControllerDelegate: {}
    NSFetchedResultsSectionInfo: {}

functions:

    # Make sure we don't miss any functions if new ones are introduced in a later version
    (NS.*):
        class: CoreData
        name: "Function__#{g[0]}"

values:

    NS(.*Key):
        type: NSString
        name: "#{g[0]}"

    NS(.*Notification):
        name: "#{g[0]}"
        type: NSString

    NS(.*MergePolicy):
        name: "#{g[0]}"
        readonly: true

    NS(.*StoreType):
        name: "#{g[0]}"

    NS(.*Option):
        name: "#{g[0]}"
        type: NSString

    NS(PersistentStoreOSCompatibility):
        name: "#{g[0]}"
        type: NSString

    NS(.*ErrorDomain):
        type: NSString
        name: "#{g[0]}"

    NS(CoreDataVersionNumber):
        name: "#{g[0]}"
        readonly: true

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?NS.*):
        class: CoreData
        name: "Value__#{g[0]}"

constants:

    NS(CoreDataVersionNumber.*):
        class: CoreData
        name: "#{g[0]}"

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?NS.*):
        class: CoreData
        name: "Constant__#{g[0]}"
